// Generated by gencpp from file wzh_realsense/vision.msg
// DO NOT EDIT!


#ifndef WZH_REALSENSE_MESSAGE_VISION_H
#define WZH_REALSENSE_MESSAGE_VISION_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace wzh_realsense
{
template <class ContainerAllocator>
struct vision_
{
  typedef vision_<ContainerAllocator> Type;

  vision_()
    : pitch(0)
    , yaw(0)
    , roll(0)
    , distance(0)  {
    }
  vision_(const ContainerAllocator& _alloc)
    : pitch(0)
    , yaw(0)
    , roll(0)
    , distance(0)  {
  (void)_alloc;
    }



   typedef int32_t _pitch_type;
  _pitch_type pitch;

   typedef int32_t _yaw_type;
  _yaw_type yaw;

   typedef int32_t _roll_type;
  _roll_type roll;

   typedef int32_t _distance_type;
  _distance_type distance;





  typedef boost::shared_ptr< ::wzh_realsense::vision_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::wzh_realsense::vision_<ContainerAllocator> const> ConstPtr;

}; // struct vision_

typedef ::wzh_realsense::vision_<std::allocator<void> > vision;

typedef boost::shared_ptr< ::wzh_realsense::vision > visionPtr;
typedef boost::shared_ptr< ::wzh_realsense::vision const> visionConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::wzh_realsense::vision_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::wzh_realsense::vision_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::wzh_realsense::vision_<ContainerAllocator1> & lhs, const ::wzh_realsense::vision_<ContainerAllocator2> & rhs)
{
  return lhs.pitch == rhs.pitch &&
    lhs.yaw == rhs.yaw &&
    lhs.roll == rhs.roll &&
    lhs.distance == rhs.distance;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::wzh_realsense::vision_<ContainerAllocator1> & lhs, const ::wzh_realsense::vision_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace wzh_realsense

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::wzh_realsense::vision_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::wzh_realsense::vision_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::wzh_realsense::vision_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::wzh_realsense::vision_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::wzh_realsense::vision_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::wzh_realsense::vision_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::wzh_realsense::vision_<ContainerAllocator> >
{
  static const char* value()
  {
    return "5de51d9587f4b0696dfe0112f866aaf0";
  }

  static const char* value(const ::wzh_realsense::vision_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x5de51d9587f4b069ULL;
  static const uint64_t static_value2 = 0x6dfe0112f866aaf0ULL;
};

template<class ContainerAllocator>
struct DataType< ::wzh_realsense::vision_<ContainerAllocator> >
{
  static const char* value()
  {
    return "wzh_realsense/vision";
  }

  static const char* value(const ::wzh_realsense::vision_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::wzh_realsense::vision_<ContainerAllocator> >
{
  static const char* value()
  {
    return "int32 pitch\n"
"int32 yaw\n"
"int32 roll\n"
"int32 distance\n"
;
  }

  static const char* value(const ::wzh_realsense::vision_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::wzh_realsense::vision_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.pitch);
      stream.next(m.yaw);
      stream.next(m.roll);
      stream.next(m.distance);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct vision_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::wzh_realsense::vision_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::wzh_realsense::vision_<ContainerAllocator>& v)
  {
    s << indent << "pitch: ";
    Printer<int32_t>::stream(s, indent + "  ", v.pitch);
    s << indent << "yaw: ";
    Printer<int32_t>::stream(s, indent + "  ", v.yaw);
    s << indent << "roll: ";
    Printer<int32_t>::stream(s, indent + "  ", v.roll);
    s << indent << "distance: ";
    Printer<int32_t>::stream(s, indent + "  ", v.distance);
  }
};

} // namespace message_operations
} // namespace ros

#endif // WZH_REALSENSE_MESSAGE_VISION_H
